import { l as Report, H as HtmlValidate } from './core';
export { A as AttributeData, V as AttributeEvent, a5 as CompatibilityOptions, X as ConditionalEvent, C as Config, a as ConfigData, b as ConfigError, c as ConfigLoader, z as ConfigReadyEvent, _ as DOMLoadEvent, $ as DOMReadyEvent, Y as DirectiveEvent, Z as DoctypeEvent, D as DynamicValue, Q as ElementReadyEvent, y as Event, x as EventCallback, E as EventDump, w as EventHandler, a2 as Formatter, d as HtmlElement, H as HtmlValidate, a1 as ListenEventMap, L as Location, n as Message, i as MetaCopyableProperty, M as MetaData, g as MetaElement, h as MetaTable, N as NodeClosed, u as Parser, t as Plugin, P as ProcessElementContext, l as Report, m as Reporter, o as Result, R as Rule, j as RuleDocumentation, f as SchemaValidationError, S as Severity, k as Source, B as SourceReadyEvent, K as TagCloseEvent, J as TagEndEvent, I as TagOpenEvent, O as TagReadyEvent, G as TagStartEvent, s as TemplateExtractor, T as TextNode, e as TokenDump, F as TokenEvent, q as TransformContext, r as Transformer, a0 as TriggerEventMap, U as UserError, W as WhitespaceEvent, a4 as compatibilityCheck, p as configPresets, a3 as formatterFactory, v as ruleExists } from './core';
import 'ajv';
import 'ajv/dist/types';

declare const version: string;

interface ExpandOptions {
    /**
     * Working directory. Defaults to `process.cwd()`.
     */
    cwd?: string;
    /**
     * List of extensions to search for when expanding directories. Extensions
     * should be passed without leading dot, e.g. "html" instead of ".html".
     */
    extensions?: string[];
}

interface InitResult {
    filename: string;
}

interface CLIOptions {
    configFile?: string;
    rules?: string | string[];
}
declare class CLI {
    private options;
    private config;
    private ignored;
    /**
     * Create new CLI helper.
     *
     * Can be used to create tooling with similar properties to bundled CLI
     * script.
     */
    constructor(options?: CLIOptions);
    /**
     * Returns list of files matching patterns and are not ignored.
     */
    expandFiles(patterns: string[], options?: ExpandOptions): string[];
    getFormatter(formatters: string): (report: Report) => string;
    /**
     * Initialize project with a new configuration.
     *
     * A new `.htmlvalidate.json` file will be placed in the path provided by
     * `cwd`.
     */
    init(cwd: string): Promise<InitResult>;
    /**
     * Searches ".htmlvalidateignore" files from filesystem and returns `true` if
     * one of them contains a pattern matching given filename.
     */
    isIgnored(filename: string): boolean;
    /**
     * Clear cache.
     *
     * Previously fetched [[HtmlValidate]] instances must either be fetched again
     * or call [[HtmlValidate.flushConfigCache]].
     */
    clearCache(): void;
    /**
     * Get HtmlValidate instance with configuration based on options passed to the
     * constructor.
     */
    getValidator(): HtmlValidate;
    private getConfig;
}

export { CLI, version };
